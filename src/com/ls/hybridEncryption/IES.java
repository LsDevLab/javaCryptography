package com.ls.hybridEncryption;

import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.Security;
import java.security.spec.ECGenParameterSpec; // generators of parameters for Elliptic Curves
import javax.crypto.Cipher;


public class IES {

    public static void main(String[] args) throws Exception {

        String name = "secp256r1";  // type of elliptic curve, other examples secp256k1
        String plainText = "Ciao";

        KeyPairGenerator key = KeyPairGenerator.getInstance("ECDH");
        key.initialize(new ECGenParameterSpec(name));

        // use key.initialize(2048);  + change ECDH to DH and ECIES to IES in order to use IES based on
        // multiplicate groups
        // Key pair to store public and private key generated by Alice
        KeyPair keyPair = key.generateKeyPair();

        // Encryption under Alice's PK done by Bob
        Cipher iesCipher = Cipher.getInstance("ECIES");
        System.out.println("" + iesCipher.getProvider());
        iesCipher.init(Cipher.ENCRYPT_MODE, keyPair.getPublic());
        byte cipherText[] = new byte[iesCipher.getOutputSize(plainText.getBytes().length)];
        // create an array of bytes of the length that can store a ciphertext of the input length
        int ctlength = iesCipher.update(plainText.getBytes(), 0, plainText.getBytes().length, cipherText, 0);
        ctlength += iesCipher.doFinal(cipherText, ctlength);
        // Decryption done by Alice of the CT cipherText encrypted by Bob
        Cipher iesCipher2 = Cipher.getInstance("ECIES");
        iesCipher2.init(Cipher.DECRYPT_MODE, keyPair.getPrivate());
        byte[] plainText2 = new byte[iesCipher2.getOutputSize(cipherText.length)];
        int ctlength2 = iesCipher2.update(cipherText, 0, ctlength, plainText2, 0);
        ctlength2 += iesCipher2.doFinal(plainText2, ctlength2);
        System.out.println("decrypted plaintext: " + new String(plainText2));


    }
}
